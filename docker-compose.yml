version: "3.4"

services:
  bunkerweb:
    image: bunkerity/bunkerweb:${BUNKERWEB_VERSION:-1.6.1}
    ports:
      - ${HTTP_PORT:-80}:8080
      - ${HTTPS_PORT:-443}:8443
    labels:
      - "bunkerweb.INSTANCE=yes"
    environment:
      API_WHITELIST_IP: "${API_WHITELIST_IP:-127.0.0.0/8 10.20.30.0/24}"
    networks:
      - bw-universe
      - bw-services

  bw-scheduler:
    image: bunkerity/bunkerweb-scheduler:${BUNKERWEB_VERSION:-1.6.1}
    container_name: bw-scheduler
    depends_on:
      - bunkerweb
    volumes:
      - ./bw-data:/data
    environment:
      - BUNKERWEB_INSTANCES=bunkerweb
      - MULTISITE=yes
      - SERVER_NAME=${SERVER_NAMES}
      - WHITELIST_IP_URLS=${WHITELIST_IP_URLS:-}
      - API_WHITELIST_IP=${API_WHITELIST_IP:-127.0.0.0/8 10.20.30.0/24}
      - BLACKLIST_RDNS=${BLACKLIST_RDNS:-.shodan.io .censys.io .google.com .googlebot.com .yandex.ru .yandex.net .yandex.com .search.msn.com .baidu.com .baidu.jp .crawl.yahoo.net .fwd.linkedin.com .twitter.com .twttr.com .discord.com}
      - WHITELIST_COUNTRY=${WHITELIST_COUNTRY:-FR}
      - SERVE_FILES=${SERVE_FILES:-no}
      - DISABLE_DEFAULT_SERVER=${DISABLE_DEFAULT_SERVER:-yes}
      - AUTO_LETS_ENCRYPT=${AUTO_LETS_ENCRYPT:-yes}
      - USE_CLIENT_CACHE=${USE_CLIENT_CACHE:-yes}
      - USE_GZIP=${USE_GZIP:-yes}
      - USE_REVERSE_PROXY=${USE_REVERSE_PROXY:-yes}
     # Proxy to outpost -------------------------------------------
      - REVERSE_PROXY_URL_999=/outpost.goauthentik.io
      - REVERSE_PROXY_HOST_999=http://server:9000
      - REVERSE_PROXY_HEADERS_999=X-Original-URL $$scheme://$$http_host$$request_uri;Content-Length ""
      - REVERSE_PROXY_HEADERS_CLIENT_999=Set-Cookie $$auth_cookie
      - REVERSE_PROXY_AUTH_REQUEST_SET_999=$$auth_cookie $$upstream_http_set_cookie
      # Authentik -------------------------------------------
      - ${AUTH_DOMAIN}_REVERSE_PROXY_URL=/
      - ${AUTH_DOMAIN}_REVERSE_PROXY_HOST=http://server:9000
      - ${AUTH_DOMAIN}_REVERSE_PROXY_WS=yes
      - ${AUTH_DOMAIN}_LIMIT_REQ_URL_1=^/api/
      - ${AUTH_DOMAIN}_LIMIT_REQ_RATE_1=5r/s
      - ${AUTH_DOMAIN}_REVERSE_PROXY_INTERCEPT_ERRORS=no
      - ${AUTH_DOMAIN}_INTERCEPTED_ERROR_CODES=400 404 405 429 367 573
      - ${AUTH_DOMAIN}_ALLOWED_METHODS=GET|POST|HEAD|PUT|DELETE|PATCH
      - ${AUTH_DOMAIN}_COOKIE_FLAGS=* SameSite=Lax
      # Bunkerweb UI -------------------------------------------
      - ${ADMIN_DOMAIN}_USE_UI=yes
      - ${ADMIN_DOMAIN}_REVERSE_PROXY_URL=/myconfig
      - ${ADMIN_DOMAIN}_REVERSE_PROXY_HOST=http://bw-ui:7000
      - ${ADMIN_DOMAIN}_WHITELIST_COUNTRY=${WHITELIST_COUNTRY:-FR}
      - ${ADMIN_DOMAIN}_INTERCEPTED_ERROR_CODES=400 404 405 413 429 500 501 502 503 504
      # Vaultwarden UI -------------------------------------------
      - ${VAULT_DOMAIN}_REVERSE_PROXY_URL=/ # Laisse l'accès normal à Vaultwarden
      - ${VAULT_DOMAIN}_REVERSE_PROXY_BUFFERING=no
      - ${VAULT_DOMAIN}_REVERSE_PROXY_HOST=http://vaultwarden
      - ${VAULT_DOMAIN}_REVERSE_PROXY_INTERCEPT_ERRORS=no
      - ${VAULT_DOMAIN}_REVERSE_PROXY_WS=yes
      - ${VAULT_DOMAIN}_INTERCEPTED_ERROR_CODES=400 404 405 413 429 500 501 502 503 504
      - ${VAULT_DOMAIN}_ALLOWED_METHODS=GET|POST|HEAD|PUT
      # Vaultwarden/admin avec Authentik -------------------------------------------
      - ${VAULT_DOMAIN}_REVERSE_PROXY_URL_1=/admin
      - ${VAULT_DOMAIN}_REVERSE_PROXY_HOST_1=http://vaultwarden
      - ${VAULT_DOMAIN}_REVERSE_PROXY_AUTH_REQUEST_1=/outpost.goauthentik.io/auth/nginx
      - ${VAULT_DOMAIN}_REVERSE_PROXY_AUTH_REQUEST_SIGNIN_URL_1=https://${AUTH_DOMAIN}/outpost.goauthentik.io/start?rd=$$scheme%3A%2F%2F$$host$$request_uri
      - ${VAULT_DOMAIN}_REVERSE_PROXY_AUTH_REQUEST_SET_1=$$auth_cookie $$upstream_http_set_cookie;$$authentik_username $$upstream_http_x_authentik_username;$$authentik_groups $$upstream_http_x_authentik_groups;$$authentik_email $$upstream_http_x_authentik_email;$$authentik_name $$upstream_http_x_authentik_name;$$authentik_uid $$upstream_http_x_authentik_uid
      - ${VAULT_DOMAIN}_REVERSE_PROXY_HEADERS_CLIENT_1=Set-Cookie $$auth_cookie
      - ${VAULT_DOMAIN}_REVERSE_PROXY_HEADERS_1=X-authentik-username $$authentik_username;X-authentik-groups $$authentik_groups;X-authentik-email $$authentik_email;X-authentik-name $$authentik_name;X-authentik-uid $$authentik_uid
    restart: "unless-stopped"
    networks:
      - bw-universe

  bw-docker:
    image: tecnativa/docker-socket-proxy:nightly
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - CONTAINERS=1
      - LOG_LEVEL=warning
    networks:
      - bw-docker

  bw-ui:
    image: bunkerity/bunkerweb-ui:${BUNKERWEB_VERSION:-1.6.1}
    restart: unless-stopped
    depends_on:
      - bw-docker
    volumes:
      - bw-data:/data
    environment:
      - DOCKER_HOST=tcp://bw-docker:2375
      - ADMIN_USERNAME=${BW_UI_ADMIN_USER:-admin}
      - ADMIN_PASSWORD_FILE=/run/secrets/bw_ui_admin_password
    secrets:
      - bw_ui_admin_password
    networks:
      bw-universe:
        aliases:
          - bw-ui
      bw-docker:

  # APPLICATIONS Vaultwarden -------------------------------------------
  vaultwarden:
    image: vaultwarden/server:${VAULTWARDEN_VERSION:-latest}
    container_name: vaultwarden
    restart: always
    environment:
      DOMAIN: "https://${VAULT_DOMAIN}"
      ADMIN_TOKEN_FILE: /run/secrets/vaultwarden_admin_token
    volumes:
      - ./vw-data:/data
    secrets:
      - vaultwarden_admin_token
    networks:
      - bw-services

  # AUTHENTIK SERVICES -------------------------------------------

  postgresql:
    image: docker.io/library/postgres:${POSTGRES_VERSION:-16-alpine}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - ./postgresql-data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_USER: ${PG_USER:-authentik}
      POSTGRES_DB: ${PG_DB:-authentik}
    secrets:
      - postgres_password
    networks:
      - bw-services

  redis:
    image: docker.io/library/redis:${REDIS_VERSION:-alpine}
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - ./redis-data:/data
    networks:
      - bw-services

  server:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2025.2.3}
    restart: unless-stopped
    container_name: server
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD_FILE: /run/secrets/postgres_password
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
    volumes:
      - ./media:/media
      - ./custom-templates:/templates
    secrets:
      - postgres_password
    depends_on:
      - postgresql
      - redis
    networks:
      - bw-services

  worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2025.2.3}
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD_FILE: /run/secrets/postgres_password
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./media:/media
      - ./certs:/certs
      - ./custom-templates:/templates
    secrets:
      - postgres_password
    depends_on:
      - postgresql
      - redis
    networks:
      - bw-services

# Tous les volumes sont maintenant des volumes liés au système de fichiers local
# et non des volumes Docker nommés

networks:
  bw-universe:
    name: bw-universe
    ipam:
      driver: default
      config:
        - subnet: ${NETWORK_SUBNET:-10.20.30.0/24}
  bw-services:
    name: bw-services
  bw-docker:
    name: bw-docker

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  vaultwarden_admin_token:
    file: ./secrets/vaultwarden_admin_token.txt
  bw_ui_admin_password:
    file: ./secrets/bw_ui_admin_password.txt
